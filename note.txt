            WHAT IS NODE.JS?

- Node.js is a JavaScript runtime and a runtime is a program or an environment that runs other programs

- Node.js was built with c++ and it uses the V8 JavaScript engine that's also used with Google Chrome web browser

- Node.js is mostly used for developing server-side & network applications/apis

            HOW NODE.JS WORKS

- V8 JS ENGINE => Node is built ontop of the V8 JavaScript engine. The V8 engine is written in c++ and it takes your JavaScript code and converts it into machine code

- Non-Blocking  => It doesn't wait around for I-O operations which are Input - Output operationsand those are things like Network calls, file system operations, database operations and instead of blockking the execution of code while waiting for these things to happen or these to complete, node.js uses events and callbacks and this allows it to handle thousands of connections at the same time

- Single Threaded

- Event Loop

            HOW TO SETUP NEW NODE.JS PROJECT

- Download Node Js from the site
- In your command line use node -- version to check the version
- npm -- version to check the version 
- To use node.js from the command line node then enter

- To use from Vs code
- In your command line make a directory mkdir nodejs-nameYouWant 
- CD into that folder cd nodejs-folderName
- Then open the text editor/vs code with code .

Create an entry point(main file) => index.js or app.js or server.js

# To use ES modules, in the package.json file, below the main key, add a type and the value set to module. that is "type": "module"


        WAYS TO EXPORT
1.  export const functionName = () => ;
2.  export { functionName };
3.  export default functionName;

                
    "start": "node server.js" npm start
    "dev": "node server.js" npm run dev

        TO INSTALL NODEMON
npm install nodemon
To install it as a Dev dependency npm install -D nodemon

        TO USE NODEMON
- in the package.json use "start": "nodemon server.js" in the script then npm start from the terminal

        TO USE .env
- Create a .env file
- Set PORT=8080 or 8000
- Update your package.json file "start": "nodemon --env-file=.env server.js"
- Update your server.js to use port.
 const PORT = process.env.PORT;


                TO GET CURRENT PATH
-import url from 'url';
-import path from 'path';

const __filename = url.fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log(__filename, __dirname);

                MIDDLEWARE
Middleware are basically modules or functions that have access to the request and response object because they it they sit in the middle of incoming requests and outgoing






















/////////////////////////////////////////////////////////////////////
import { createServer } from "http";
const PORT = process.env.PORT;

const users = [
    { id: 1, name: 'John Doe' },
    { id: 2, name: 'Jane Doe' },
    { id: 3, name: 'Jim Doe' }
];

const server = createServer((req, res) => {
    if (req.url === '/api/users' && req.method === 'GET') {
        res.setHeader('Content-Type', 'application/json');
        res.write(JSON.stringify(users));
        res.end();
    } else if (req.url.match(/\/api\/users\/([0-9]+)/) && req.method === 'GET') {
        const id = req.url.split('/')[3];
        const user = users.find((user) => user.id === parseInt(id));
        if (user) {
            res.setHeader('Content-Type', 'application/json');
            res.write(JSON.stringify(user));
            res.end();
        } else {
            res.setHeader('Content-Type', 'application/json');
            res.statusCode = 404
            res.write(JSON.stringify({ message: 'User not found' }));
            res.end();
        }
    } else {
        res.setHeader('Content-Type', 'application/json');
        res.statusCode = 404
        res.write(JSON.stringify({ message: 'Route not found' }));
        res.end();
    }
});

server.listen(PORT, () => {
    console.log(`Server running onn port ${PORT}`);
});